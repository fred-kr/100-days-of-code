[
    {
        "label": "Menu",
        "importPath": "menu",
        "description": "menu",
        "isExtraImport": true,
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "menu",
        "description": "menu",
        "isExtraImport": true,
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "CoffeeMaker",
        "importPath": "coffee_maker",
        "description": "coffee_maker",
        "isExtraImport": true,
        "detail": "coffee_maker",
        "documentation": {}
    },
    {
        "label": "MoneyMachine",
        "importPath": "money_machine",
        "description": "money_machine",
        "isExtraImport": true,
        "detail": "money_machine",
        "documentation": {}
    },
    {
        "label": "PrettyTable",
        "importPath": "prettytable",
        "description": "prettytable",
        "isExtraImport": true,
        "detail": "prettytable",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "question_model",
        "description": "question_model",
        "isExtraImport": true,
        "detail": "question_model",
        "documentation": {}
    },
    {
        "label": "question_data_2",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "QuizBrain",
        "importPath": "quiz_brain",
        "description": "quiz_brain",
        "isExtraImport": true,
        "detail": "quiz_brain",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Turtle",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Snake",
        "importPath": "snake_body",
        "description": "snake_body",
        "isExtraImport": true,
        "detail": "snake_body",
        "documentation": {}
    },
    {
        "label": "Scene",
        "importPath": "scene_view",
        "description": "scene_view",
        "isExtraImport": true,
        "detail": "scene_view",
        "documentation": {}
    },
    {
        "label": "CoffeeMaker",
        "kind": 6,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.coffee_maker",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.coffee_maker",
        "peekOfCode": "class CoffeeMaker:\n    \"\"\"Models the machine that makes the coffee\"\"\"\n    def __init__(self):\n        self.resources = {\n            \"water\": 300,\n            \"milk\": 200,\n            \"coffee\": 100,\n        }\n    def report(self):\n        \"\"\"Prints a report of all resources.\"\"\"",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.coffee_maker",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "peekOfCode": "menu = Menu()\ncoffee_machine = CoffeeMaker()\nmoney_maker = MoneyMachine()\nwhile True:\n    user_choice = input(f\"What would you like? ({menu.get_items()}): \").lower()\n    if user_choice == \"off\":\n        break\n    if user_choice == \"report\":\n        coffee_machine.report()\n        money_maker.report()",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "documentation": {}
    },
    {
        "label": "coffee_machine",
        "kind": 5,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "peekOfCode": "coffee_machine = CoffeeMaker()\nmoney_maker = MoneyMachine()\nwhile True:\n    user_choice = input(f\"What would you like? ({menu.get_items()}): \").lower()\n    if user_choice == \"off\":\n        break\n    if user_choice == \"report\":\n        coffee_machine.report()\n        money_maker.report()\n    if user_choice in menu.get_items():",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "documentation": {}
    },
    {
        "label": "money_maker",
        "kind": 5,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "peekOfCode": "money_maker = MoneyMachine()\nwhile True:\n    user_choice = input(f\"What would you like? ({menu.get_items()}): \").lower()\n    if user_choice == \"off\":\n        break\n    if user_choice == \"report\":\n        coffee_machine.report()\n        money_maker.report()\n    if user_choice in menu.get_items():\n        selected_drink = menu.find_drink(user_choice)",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.main",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "kind": 6,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "peekOfCode": "class MenuItem:\n    \"\"\"Models each Menu Item.\"\"\"\n    def __init__(self, name, water, milk, coffee, cost):\n        self.name = name\n        self.cost = cost\n        self.ingredients = {\n            \"water\": water,\n            \"milk\": milk,\n            \"coffee\": coffee\n        }",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "peekOfCode": "class Menu:\n    \"\"\"Models the Menu with drinks.\"\"\"\n    def __init__(self):\n        self.menu = [\n            MenuItem(name=\"latte\", water=200, milk=150, coffee=24, cost=2.5),\n            MenuItem(name=\"espresso\", water=50, milk=0, coffee=18, cost=1.5),\n            MenuItem(name=\"cappuccino\", water=250, milk=50, coffee=24, cost=3),\n        ]\n    def get_items(self):\n        \"\"\"Returns all the names of the available menu items\"\"\"",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.menu",
        "documentation": {}
    },
    {
        "label": "MoneyMachine",
        "kind": 6,
        "importPath": "Day 16 - Intro to OOP.oop-coffee-machine-start.money_machine",
        "description": "Day 16 - Intro to OOP.oop-coffee-machine-start.money_machine",
        "peekOfCode": "class MoneyMachine:\n    CURRENCY = \"$\"\n    COIN_VALUES = {\n        \"quarters\": 0.25,\n        \"dimes\": 0.10,\n        \"nickles\": 0.05,\n        \"pennies\": 0.01\n    }\n    def __init__(self):\n        self.profit = 0",
        "detail": "Day 16 - Intro to OOP.oop-coffee-machine-start.money_machine",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "Day 16 - Intro to OOP.main",
        "description": "Day 16 - Intro to OOP.main",
        "peekOfCode": "table = PrettyTable()\ntable.add_column(\"Pokemon Name\", [\"Pikachu\", \"Squirtle\", \"Charmander\"])\ntable.add_column(\"Type\", [\"Electric\", \"Water\", \"Fire\"])\ntable.add_column(\"HP\", [100, 100, 100])\ntable.align = \"l\"\nprint(table)\n# turner = Turtle()\n# my_screen = Screen()\n# turner.shape(\"turtle\")\n# turner.color(\"red\")",
        "detail": "Day 16 - Intro to OOP.main",
        "documentation": {}
    },
    {
        "label": "table.align",
        "kind": 5,
        "importPath": "Day 16 - Intro to OOP.main",
        "description": "Day 16 - Intro to OOP.main",
        "peekOfCode": "table.align = \"l\"\nprint(table)\n# turner = Turtle()\n# my_screen = Screen()\n# turner.shape(\"turtle\")\n# turner.color(\"red\")\n# turner.forward(100)\n# my_screen.exitonclick()",
        "detail": "Day 16 - Intro to OOP.main",
        "documentation": {}
    },
    {
        "label": "question_data",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.quiz-game.data",
        "description": "Day 17 - Class on Classes.quiz-game.data",
        "peekOfCode": "question_data = [\n    {\"text\": \"A slug's blood is green.\", \"answer\": \"True\"},\n    {\"text\": \"The loudest animal is the African Elephant.\", \"answer\": \"False\"},\n    {\"text\": \"Approximately one quarter of human bones are in the feet.\", \"answer\": \"True\"},\n    {\"text\": \"The total surface area of a human lungs is the size of a football pitch.\", \"answer\": \"True\"},\n    {\"text\": \"In West Virginia, USA, if you accidentally hit an animal with your car, you are free to take it home to eat.\", \"answer\": \"True\"},\n    {\"text\": \"In London, UK, if you happen to die in the House of Parliament, you are entitled to a state funeral.\", \"answer\": \"False\"},\n    {\"text\": \"It is illegal to pee in the Ocean in Portugal.\", \"answer\": \"True\"},\n    {\"text\": \"You can lead a cow down stairs but not up stairs.\", \"answer\": \"False\"},\n    {\"text\": \"Google was originally called 'Backrub'.\", \"answer\": \"True\"},",
        "detail": "Day 17 - Class on Classes.quiz-game.data",
        "documentation": {}
    },
    {
        "label": "question_data_2",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.quiz-game.data",
        "description": "Day 17 - Class on Classes.quiz-game.data",
        "peekOfCode": "question_data_2 = [\n    {\n        \"category\": \"Science: Computers\",\n        \"type\": \"boolean\",\n        \"difficulty\": \"easy\",\n        \"question\": \"The programming language &quot;Python&quot; is based off a modified version of &quot;JavaScript&quot;.\",\n        \"correct_answer\": \"False\",\n        \"incorrect_answers\": [\n                \"True\"\n        ]",
        "detail": "Day 17 - Class on Classes.quiz-game.data",
        "documentation": {}
    },
    {
        "label": "question_bank",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.quiz-game.main",
        "description": "Day 17 - Class on Classes.quiz-game.main",
        "peekOfCode": "question_bank = []\nfor question in question_data_2:\n    question_text = question[\"question\"]\n    question_answer = question[\"correct_answer\"]\n    new_question = Question(question_text, question_answer)\n    question_bank.append(new_question)\nquiz = QuizBrain(question_bank)\nquiz.next_question()",
        "detail": "Day 17 - Class on Classes.quiz-game.main",
        "documentation": {}
    },
    {
        "label": "quiz",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.quiz-game.main",
        "description": "Day 17 - Class on Classes.quiz-game.main",
        "peekOfCode": "quiz = QuizBrain(question_bank)\nquiz.next_question()",
        "detail": "Day 17 - Class on Classes.quiz-game.main",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "Day 17 - Class on Classes.quiz-game.question_model",
        "description": "Day 17 - Class on Classes.quiz-game.question_model",
        "peekOfCode": "class Question:\n    def __init__(self, q_text, q_answer):\n        self.text = q_text\n        self.answer = q_answer",
        "detail": "Day 17 - Class on Classes.quiz-game.question_model",
        "documentation": {}
    },
    {
        "label": "QuizBrain",
        "kind": 6,
        "importPath": "Day 17 - Class on Classes.quiz-game.quiz_brain",
        "description": "Day 17 - Class on Classes.quiz-game.quiz_brain",
        "peekOfCode": "class QuizBrain:\n    def __init__(self, q_list):\n        self.question_number = 0\n        self.question_list = q_list\n        self.last_answer = True\n        self.score = 0\n    def still_has_questions(self):\n        return self.question_number < len(self.question_list)\n    def next_question(self):\n        if self.still_has_questions():",
        "detail": "Day 17 - Class on Classes.quiz-game.quiz_brain",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Day 17 - Class on Classes.main",
        "description": "Day 17 - Class on Classes.main",
        "peekOfCode": "class User:\n    def __init__(self, user_id, username):\n        self.id = user_id\n        self.username = username\n        self.followers = 0\n        self.following = 0\n    def follow(self, user):\n        user.followers += 1\n        self.followers += 1\nuser_1 = User(1, \"user1\")",
        "detail": "Day 17 - Class on Classes.main",
        "documentation": {}
    },
    {
        "label": "user_1",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.main",
        "description": "Day 17 - Class on Classes.main",
        "peekOfCode": "user_1 = User(1, \"user1\")\nuser_2 = User(2, \"user2\")\nuser_1.follow(user_2)\nprint(user_1.followers)\nprint(user_1.following)\nprint(user_2.followers)\nprint(user_2.following)",
        "detail": "Day 17 - Class on Classes.main",
        "documentation": {}
    },
    {
        "label": "user_2",
        "kind": 5,
        "importPath": "Day 17 - Class on Classes.main",
        "description": "Day 17 - Class on Classes.main",
        "peekOfCode": "user_2 = User(2, \"user2\")\nuser_1.follow(user_2)\nprint(user_1.followers)\nprint(user_1.following)\nprint(user_2.followers)\nprint(user_2.following)",
        "detail": "Day 17 - Class on Classes.main",
        "documentation": {}
    },
    {
        "label": "color_list",
        "kind": 5,
        "importPath": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "description": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "peekOfCode": "color_list = [\n    (197, 165, 117), (142, 80, 56), (220, 201, 137), (59, 94, 119), (164, 152, 53), (136, 162, 181), (131, 34, 22), (69, 39, 32), (53, 117, 86), (192, 95, 78), (146, 177, 149), (19, 91, 68), (165, 143, 157), (31, 59, 76), (111, 75, 81), (228, 176, 164), (128, 29, 33), (179, 204, 177), (71, 34, 36), (25, 82, 89), (89, 146, 127), (18, 69, 57), (41, 66, 90), (219, 178, 182), (175, 94, 98), (179, 192, 205), (104, 129, 152), (67, 64, 59), (112, 135, 140), (175, 196, 206)\n]\nt = Turtle()\nscreen = Screen()\nscreen.colormode(255)\nfor row in range(10):\n    for column in range(9):\n        t.dot(20, color_list[rd.randint(0, len(color_list) - 1)])\n        t.penup()",
        "detail": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "description": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "peekOfCode": "t = Turtle()\nscreen = Screen()\nscreen.colormode(255)\nfor row in range(10):\n    for column in range(9):\n        t.dot(20, color_list[rd.randint(0, len(color_list) - 1)])\n        t.penup()\n        t.forward(50)\n        t.dot(20, color_list[rd.randint(0, len(color_list) - 1)])\n        t.penup()",
        "detail": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "description": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "peekOfCode": "screen = Screen()\nscreen.colormode(255)\nfor row in range(10):\n    for column in range(9):\n        t.dot(20, color_list[rd.randint(0, len(color_list) - 1)])\n        t.penup()\n        t.forward(50)\n        t.dot(20, color_list[rd.randint(0, len(color_list) - 1)])\n        t.penup()\n    if row % 2 != 0:",
        "detail": "Day 18 - Creating paintings worth Millions.hirst-painting.modern_art",
        "documentation": {}
    },
    {
        "label": "draw_spirograph",
        "kind": 2,
        "importPath": "Day 18 - Creating paintings worth Millions.main",
        "description": "Day 18 - Creating paintings worth Millions.main",
        "peekOfCode": "def draw_spirograph(size_of_gap):\n    ttt.speed(\"fastest\")\n    for i in range(int(360 / size_of_gap)):\n        ttt.pencolor(randint(0, 255), randint(0, 255), randint(0, 255))\n        ttt.circle(100)\n        ttt.setheading(ttt.heading() + size_of_gap)\ndraw_spirograph(5)\ndef random_walk():\n    ttt.speed(\"fast\")\n    ttt.pensize(15)",
        "detail": "Day 18 - Creating paintings worth Millions.main",
        "documentation": {}
    },
    {
        "label": "random_walk",
        "kind": 2,
        "importPath": "Day 18 - Creating paintings worth Millions.main",
        "description": "Day 18 - Creating paintings worth Millions.main",
        "peekOfCode": "def random_walk():\n    ttt.speed(\"fast\")\n    ttt.pensize(15)\n    while True:\n        ttt.pencolor(randint(0, 255), randint(0, 255), randint(0, 255))\n        ttt.forward(30)\n        new_direction = randint(0, 3)\n        if new_direction == 0:\n            ttt.setheading(0)\n        elif new_direction == 1:",
        "detail": "Day 18 - Creating paintings worth Millions.main",
        "documentation": {}
    },
    {
        "label": "ttt",
        "kind": 5,
        "importPath": "Day 18 - Creating paintings worth Millions.main",
        "description": "Day 18 - Creating paintings worth Millions.main",
        "peekOfCode": "ttt = Turtle()\n# Draw a square\n# for i in range(4):\n#     ttt.forward(100)\n#     ttt.right(90)\n# Draw a dashed line\n# for i in range(15):\n#     ttt.forward(10)\n#     ttt.penup()\n#     ttt.forward(10)",
        "detail": "Day 18 - Creating paintings worth Millions.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Day 18 - Creating paintings worth Millions.main",
        "description": "Day 18 - Creating paintings worth Millions.main",
        "peekOfCode": "screen = Screen()\nscreen.colormode(255)\ndef draw_spirograph(size_of_gap):\n    ttt.speed(\"fastest\")\n    for i in range(int(360 / size_of_gap)):\n        ttt.pencolor(randint(0, 255), randint(0, 255), randint(0, 255))\n        ttt.circle(100)\n        ttt.setheading(ttt.heading() + size_of_gap)\ndraw_spirograph(5)\ndef random_walk():",
        "detail": "Day 18 - Creating paintings worth Millions.main",
        "documentation": {}
    },
    {
        "label": "tim",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "tim = Turtle()\nscreen = Screen()\nscreen.setup(width=500, height=400)\nuser_bet = screen.textinput(title=\"Make your bet\", prompt=\"Choose a color: \")\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\ny_positions = [-70, -40, -10, 20, 50, 80]\nall_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "screen = Screen()\nscreen.setup(width=500, height=400)\nuser_bet = screen.textinput(title=\"Make your bet\", prompt=\"Choose a color: \")\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\ny_positions = [-70, -40, -10, 20, 50, 80]\nall_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()\n    new_turtle.color(colors[turtle_index])",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "user_bet",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "user_bet = screen.textinput(title=\"Make your bet\", prompt=\"Choose a color: \")\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\ny_positions = [-70, -40, -10, 20, 50, 80]\nall_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()\n    new_turtle.color(colors[turtle_index])\n    new_turtle.goto(x=-230, y=y_positions[turtle_index])\n    all_turtles.append(new_turtle)",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\ny_positions = [-70, -40, -10, 20, 50, 80]\nall_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()\n    new_turtle.color(colors[turtle_index])\n    new_turtle.goto(x=-230, y=y_positions[turtle_index])\n    all_turtles.append(new_turtle)\nif user_bet:",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "y_positions",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "y_positions = [-70, -40, -10, 20, 50, 80]\nall_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()\n    new_turtle.color(colors[turtle_index])\n    new_turtle.goto(x=-230, y=y_positions[turtle_index])\n    all_turtles.append(new_turtle)\nif user_bet:\n    is_race_on = True",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "all_turtles",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "peekOfCode": "all_turtles = []\nfor turtle_index in range(0, 6):\n    new_turtle = Turtle(shape=\"turtle\")\n    new_turtle.penup()\n    new_turtle.color(colors[turtle_index])\n    new_turtle.goto(x=-230, y=y_positions[turtle_index])\n    all_turtles.append(new_turtle)\nif user_bet:\n    is_race_on = True\nwhile is_race_on:",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.turtle-race.main",
        "documentation": {}
    },
    {
        "label": "move_forwards",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def move_forwards():\n    tt.forward(10)\ndef move_backwards():\n    tt.back(10)\ndef rotate_counter_clockwise():\n    new_heading = tt.heading() + 10\n    tt.setheading(new_heading)\ndef rotate_clockwise():\n    new_heading = tt.heading() - 10\n    tt.setheading(new_heading)",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "move_backwards",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def move_backwards():\n    tt.back(10)\ndef rotate_counter_clockwise():\n    new_heading = tt.heading() + 10\n    tt.setheading(new_heading)\ndef rotate_clockwise():\n    new_heading = tt.heading() - 10\n    tt.setheading(new_heading)\ndef clear():\n    tt.clear()",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "rotate_counter_clockwise",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def rotate_counter_clockwise():\n    new_heading = tt.heading() + 10\n    tt.setheading(new_heading)\ndef rotate_clockwise():\n    new_heading = tt.heading() - 10\n    tt.setheading(new_heading)\ndef clear():\n    tt.clear()\n    tt.penup()\n    tt.home()",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "rotate_clockwise",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def rotate_clockwise():\n    new_heading = tt.heading() - 10\n    tt.setheading(new_heading)\ndef clear():\n    tt.clear()\n    tt.penup()\n    tt.home()\n    tt.pendown()\ndef reset():\n    tt.reset()",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "clear",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def clear():\n    tt.clear()\n    tt.penup()\n    tt.home()\n    tt.pendown()\ndef reset():\n    tt.reset()\nscreen.onkey(key=\"w\", fun=move_forwards)\nscreen.onkey(key=\"s\", fun=move_backwards)\nscreen.onkey(key=\"a\", fun=rotate_counter_clockwise)",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "def reset():\n    tt.reset()\nscreen.onkey(key=\"w\", fun=move_forwards)\nscreen.onkey(key=\"s\", fun=move_backwards)\nscreen.onkey(key=\"a\", fun=rotate_counter_clockwise)\nscreen.onkey(key=\"d\", fun=rotate_clockwise)\nscreen.onkey(key=\"c\", fun=clear)\nscreen.onkey(key=\"r\", fun=reset)\nscreen.exitonclick()",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "tt",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "tt = Turtle()\nscreen = Screen()\nscreen.listen()\ndef move_forwards():\n    tt.forward(10)\ndef move_backwards():\n    tt.back(10)\ndef rotate_counter_clockwise():\n    new_heading = tt.heading() + 10\n    tt.setheading(new_heading)",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Day 19 - Teenage Mutant Racing Turtles.main",
        "description": "Day 19 - Teenage Mutant Racing Turtles.main",
        "peekOfCode": "screen = Screen()\nscreen.listen()\ndef move_forwards():\n    tt.forward(10)\ndef move_backwards():\n    tt.back(10)\ndef rotate_counter_clockwise():\n    new_heading = tt.heading() + 10\n    tt.setheading(new_heading)\ndef rotate_clockwise():",
        "detail": "Day 19 - Teenage Mutant Racing Turtles.main",
        "documentation": {}
    },
    {
        "label": "Apple",
        "kind": 6,
        "importPath": "Day 20 - Snaking Around.apple",
        "description": "Day 20 - Snaking Around.apple",
        "peekOfCode": "class Apple:\n    def __init__(self):\n        pass\n    def get_viable_spawn_locations(self, occupied_locations):\n        viable_spawns = []\n        for x in range(-280, 280, 20):\n            for y in range(-280, 280, 20):\n                viable_spawns.append((x, y))\n        for segment in occupied_locations:\n            if (segment.xcor(), segment.ycor()) in viable_spawns:",
        "detail": "Day 20 - Snaking Around.apple",
        "documentation": {}
    },
    {
        "label": "play_area",
        "kind": 5,
        "importPath": "Day 20 - Snaking Around.main",
        "description": "Day 20 - Snaking Around.main",
        "peekOfCode": "play_area = Scene().screen_setup()\n# play_area.screen_setup()\nsnake_player = Snake([(0, 0), (-20, 0), (-40, 0)])\nplay_area.spawn_food(snake_player.get_segment_positions()) # type: ignore\n# screen = Screen()\n# screen.setup(width=600, height=600)\n# screen.bgcolor(\"black\")\n# screen.title(\"Snake Eater\")\n# snek = Snake([(0, 0), (-20, 0), (-40, 0)])\n# # 30x30 grid of 20x20 squares",
        "detail": "Day 20 - Snaking Around.main",
        "documentation": {}
    },
    {
        "label": "snake_player",
        "kind": 5,
        "importPath": "Day 20 - Snaking Around.main",
        "description": "Day 20 - Snaking Around.main",
        "peekOfCode": "snake_player = Snake([(0, 0), (-20, 0), (-40, 0)])\nplay_area.spawn_food(snake_player.get_segment_positions()) # type: ignore\n# screen = Screen()\n# screen.setup(width=600, height=600)\n# screen.bgcolor(\"black\")\n# screen.title(\"Snake Eater\")\n# snek = Snake([(0, 0), (-20, 0), (-40, 0)])\n# # 30x30 grid of 20x20 squares\n# all_spawn_positions = []\n# for x in range(-280, 280, 20):",
        "detail": "Day 20 - Snaking Around.main",
        "documentation": {}
    },
    {
        "label": "Scene",
        "kind": 6,
        "importPath": "Day 20 - Snaking Around.scene_view",
        "description": "Day 20 - Snaking Around.scene_view",
        "peekOfCode": "class Scene:\n    def __init__(self):\n        self.screen = Screen()\n        self.food = Turtle(shape=\"circle\")\n        self.score = 0\n    def screen_setup(self):\n        \"\"\"Set up the screen for the game.\"\"\"\n        self.screen.setup(width=600, height=600)\n        self.screen.bgcolor(\"black\")\n        self.screen.title(\"Snake Eater\")",
        "detail": "Day 20 - Snaking Around.scene_view",
        "documentation": {}
    },
    {
        "label": "Snake",
        "kind": 6,
        "importPath": "Day 20 - Snaking Around.snake_body",
        "description": "Day 20 - Snaking Around.snake_body",
        "peekOfCode": "class Snake:\n    def __init__(self, initial_positions):\n        self.segments = []\n        self.create_snake(initial_positions)\n        self.head = self.segments[0]\n        self.tail = self.segments[-1]\n        self.is_alive = True\n    def create_snake(self, starting_positions):\n        for position in starting_positions:\n            new_segment = Turtle(shape=\"square\")",
        "detail": "Day 20 - Snaking Around.snake_body",
        "documentation": {}
    }
]